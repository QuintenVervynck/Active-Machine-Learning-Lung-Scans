{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"gpuClass":"standard","accelerator":"GPU"},"cells":[{"cell_type":"code","source":["!pip install scikit-activeml"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":784},"id":"zlVUUp-77Adw","executionInfo":{"status":"ok","timestamp":1667644032024,"user_tz":-60,"elapsed":24026,"user":{"displayName":"Quinten Vervynck","userId":"08946071099624182893"}},"outputId":"223d58c8-54cb-4faa-cf3e-2b45781dcc27"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting scikit-activeml\n","  Downloading scikit_activeml-0.3.0-py3-none-any.whl (227 kB)\n","\u001b[K     |████████████████████████████████| 227 kB 19.5 MB/s \n","\u001b[?25hRequirement already satisfied: scipy<1.10,>=1.6 in /usr/local/lib/python3.7/dist-packages (from scikit-activeml) (1.7.3)\n","Requirement already satisfied: scikit-learn<1.2,>=0.24 in /usr/local/lib/python3.7/dist-packages (from scikit-activeml) (1.0.2)\n","Collecting joblib<1.2,>=1.0\n","  Downloading joblib-1.1.1-py2.py3-none-any.whl (309 kB)\n","\u001b[K     |████████████████████████████████| 309 kB 23.8 MB/s \n","\u001b[?25hRequirement already satisfied: numpy<1.24,>=1.20 in /usr/local/lib/python3.7/dist-packages (from scikit-activeml) (1.21.6)\n","Collecting iteration-utilities<0.12,>=0.11\n","  Downloading iteration_utilities-0.11.0-cp37-cp37m-manylinux2014_x86_64.whl (283 kB)\n","\u001b[K     |████████████████████████████████| 283 kB 49.8 MB/s \n","\u001b[?25hCollecting matplotlib<3.6,>=3.4\n","  Downloading matplotlib-3.5.3-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.whl (11.2 MB)\n","\u001b[K     |████████████████████████████████| 11.2 MB 44.4 MB/s \n","\u001b[?25hRequirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib<3.6,>=3.4->scikit-activeml) (0.11.0)\n","Collecting fonttools>=4.22.0\n","  Downloading fonttools-4.38.0-py3-none-any.whl (965 kB)\n","\u001b[K     |████████████████████████████████| 965 kB 22.4 MB/s \n","\u001b[?25hRequirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.7/dist-packages (from matplotlib<3.6,>=3.4->scikit-activeml) (7.1.2)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.7/dist-packages (from matplotlib<3.6,>=3.4->scikit-activeml) (2.8.2)\n","Requirement already satisfied: pyparsing>=2.2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib<3.6,>=3.4->scikit-activeml) (3.0.9)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib<3.6,>=3.4->scikit-activeml) (1.4.4)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.7/dist-packages (from matplotlib<3.6,>=3.4->scikit-activeml) (21.3)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from kiwisolver>=1.0.1->matplotlib<3.6,>=3.4->scikit-activeml) (4.1.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7->matplotlib<3.6,>=3.4->scikit-activeml) (1.15.0)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn<1.2,>=0.24->scikit-activeml) (3.1.0)\n","Installing collected packages: joblib, fonttools, matplotlib, iteration-utilities, scikit-activeml\n","  Attempting uninstall: joblib\n","    Found existing installation: joblib 1.2.0\n","    Uninstalling joblib-1.2.0:\n","      Successfully uninstalled joblib-1.2.0\n","  Attempting uninstall: matplotlib\n","    Found existing installation: matplotlib 3.2.2\n","    Uninstalling matplotlib-3.2.2:\n","      Successfully uninstalled matplotlib-3.2.2\n","Successfully installed fonttools-4.38.0 iteration-utilities-0.11.0 joblib-1.1.1 matplotlib-3.5.3 scikit-activeml-0.3.0\n"]},{"output_type":"display_data","data":{"application/vnd.colab-display-data+json":{"pip_warning":{"packages":["matplotlib","mpl_toolkits"]}}},"metadata":{}}]},{"cell_type":"code","execution_count":1,"metadata":{"id":"_xdwJItsfqkI","executionInfo":{"status":"ok","timestamp":1667644047880,"user_tz":-60,"elapsed":788,"user":{"displayName":"Quinten Vervynck","userId":"08946071099624182893"}}},"outputs":[],"source":["# See https://scikit-learn.org/stable/auto_examples/classification/plot_digits_classification.html#sphx-glr-auto-examples-classification-plot-digits-classification-py\n","\n","# Author: Gael Varoquaux <gael dot varoquaux at normalesup dot org>\n","# License: BSD 3 clause\n","\n","# Standard scientific Python imports\n","import matplotlib.pyplot as plt\n","import numpy as np\n","\n","# Import datasets, classifiers and performance metrics\n","from sklearn import datasets, svm, metrics\n","from sklearn.model_selection import train_test_split\n","from skactiveml.pool import UncertaintySampling\n","from skactiveml.utils import unlabeled_indices, MISSING_LABEL\n","from skactiveml.classifier import SklearnClassifier"]},{"cell_type":"code","source":["digits = datasets.load_digits()\n","print(len(digits.images))\n","\n","_, axes = plt.subplots(nrows=1, ncols=4, figsize=(10, 3))\n","for ax, image, label in zip(axes, digits.images, digits.target):\n","    ax.set_axis_off()\n","    ax.imshow(image, cmap=plt.cm.gray_r, interpolation=\"nearest\")\n","    ax.set_title(\"Training: %i\" % label)"],"metadata":{"id":"xE6Wg8k3f7v9","colab":{"base_uri":"https://localhost:8080/","height":186},"executionInfo":{"status":"ok","timestamp":1667644047881,"user_tz":-60,"elapsed":7,"user":{"displayName":"Quinten Vervynck","userId":"08946071099624182893"}},"outputId":"b7f18104-19e5-49af-90e0-9185480f5354"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["1797\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x216 with 4 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# flatten the images\n","n_samples = len(digits.images)\n","data = digits.images.reshape((n_samples, -1))\n","\n","# Create a classifier: a support vector classifier\n","clf = svm.SVC(gamma=0.001)\n","\n","# Split data into 50% train and 50% test subsets\n","X_train, X_test, y_train, y_test = train_test_split(\n","    data, digits.target, test_size=0.5, shuffle=False\n",")\n","\n","# Learn the digits on the train subset\n","clf.fit(X_train, y_train)\n","\n","# Predict the value of the digit on the test subset\n","predicted = clf.predict(X_test)"],"metadata":{"id":"10bFYHfI23iV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["_, axes = plt.subplots(nrows=1, ncols=4, figsize=(10, 3))\n","for ax, image, prediction in zip(axes, X_test, predicted):\n","    ax.set_axis_off()\n","    image = image.reshape(8, 8)\n","    ax.imshow(image, cmap=plt.cm.gray_r, interpolation=\"nearest\")\n","    ax.set_title(f\"Prediction: {prediction}\")"],"metadata":{"id":"H_jopzsV24yu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(\n","    f\"Classification report for classifier {clf}:\\n\"\n","    f\"{metrics.classification_report(y_test, predicted)}\\n\"\n",")"],"metadata":{"id":"1FK5Q8Kq27BV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["disp = metrics.ConfusionMatrixDisplay.from_predictions(y_test, predicted)\n","disp.figure_.suptitle(\"Confusion Matrix\")\n","print(f\"Confusion matrix:\\n{disp.confusion_matrix}\")\n","\n","plt.show()"],"metadata":{"id":"sgGEYlpC3Gm3"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Now we try to implement pool based active learning"],"metadata":{"id":"1j1395xF4TM1"}},{"cell_type":"code","source":["# We use the first 10 instances as initial training data.\n","X_start = X_train[:10]\n","y_start = y_train[:10]\n","y_missing = np.full(shape=y_train.shape, fill_value=MISSING_LABEL)\n","y_missing[:10] = y_train[:10]\n","\n","# Create a new classifier: a support vector classifier\n","clf_ac = SklearnClassifier(svm.SVC(probability=True, gamma=0.001),classes=np.unique(y_start), random_state=0)\n","\n","# Learn the digits on the train subset\n","# clf_ac.fit(X_start, y_start)\n","\n","# Predict the value of the digit on the test subset\n","# predicted_ac = clf_ac.predict(X_test)"],"metadata":{"id":"svzFPjwA4Rje"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["qs = UncertaintySampling(method='entropy')\n","\n","# Execute active learning cycle.\n","n_cycles = 200\n","for c in range(n_cycles):\n","    query_idx = qs.query(X=X_train, y=y_missing, clf=clf_ac)\n","    y_missing[query_idx] = y_train[query_idx]\n","\n","# Fit final classifier.\n","clf_ac.fit(X_train[~np.isnan(y_missing)], y_missing[~np.isnan(y_missing)])\n","\n","# Predict the value of the digit on the test subset\n","predicted_ac = clf_ac.predict(X_test)"],"metadata":{"id":"1tD7Xrrf52_l"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(len(y_missing))\n","print(len(y_missing[~np.isnan(y_missing)]))"],"metadata":{"id":"BDVFYRbsAWLX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["_, axes = plt.subplots(nrows=1, ncols=4, figsize=(10, 3))\n","for ax, image, prediction in zip(axes, X_test, predicted_ac):\n","    ax.set_axis_off()\n","    image = image.reshape(8, 8)\n","    ax.imshow(image, cmap=plt.cm.gray_r, interpolation=\"nearest\")\n","    ax.set_title(f\"Prediction: {prediction}\")"],"metadata":{"id":"mtSU8Qac8R-D"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(\n","    f\"Classification report for classifier {clf_ac}:\\n\"\n","    f\"{metrics.classification_report(y_test, predicted_ac)}\\n\"\n",")"],"metadata":{"id":"G1xCeVG08TV5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["disp = metrics.ConfusionMatrixDisplay.from_predictions(y_test, predicted_ac)\n","disp.figure_.suptitle(\"Confusion Matrix\")\n","print(f\"Confusion matrix:\\n{disp.confusion_matrix}\")\n","\n","plt.show()"],"metadata":{"id":"AzSwoWFu_mR4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"F_YuJO2cVL8U"},"execution_count":null,"outputs":[]}]}